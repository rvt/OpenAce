#include "utils.hpp"
#include "stdio.h"

constexpr char spinChars[] = {'\\','\\', '|', '/', '/', '|'};

constexpr uint8_t manchesterDecodeLookupTable[] =
{
    0xF0, 0xE1, 0xE0, 0xF1, 0xD2, 0xC3, 0xC2, 0xD3, 0xD0, 0xC1, 0xC0, 0xD1, 0xF2, 0xE3, 0xE2, 0xF3,
    0xB4, 0xA5, 0xA4, 0xB5, 0x96, 0x87, 0x86, 0x97, 0x94, 0x85, 0x84, 0x95, 0xB6, 0xA7, 0xA6, 0xB7,
    0xB0, 0xA1, 0xA0, 0xB1, 0x92, 0x83, 0x82, 0x93, 0x90, 0x81, 0x80, 0x91, 0xB2, 0xA3, 0xA2, 0xB3,
    0xF4, 0xE5, 0xE4, 0xF5, 0xD6, 0xC7, 0xC6, 0xD7, 0xD4, 0xC5, 0xC4, 0xD5, 0xF6, 0xE7, 0xE6, 0xF7,
    0x78, 0x69, 0x68, 0x79, 0x5A, 0x4B, 0x4A, 0x5B, 0x58, 0x49, 0x48, 0x59, 0x7A, 0x6B, 0x6A, 0x7B,
    0x3C, 0x2D, 0x2C, 0x3D, 0x1E, 0x0F, 0x0E, 0x1F, 0x1C, 0x0D, 0x0C, 0x1D, 0x3E, 0x2F, 0x2E, 0x3F,
    0x38, 0x29, 0x28, 0x39, 0x1A, 0x0B, 0x0A, 0x1B, 0x18, 0x09, 0x08, 0x19, 0x3A, 0x2B, 0x2A, 0x3B,
    0x7C, 0x6D, 0x6C, 0x7D, 0x5E, 0x4F, 0x4E, 0x5F, 0x5C, 0x4D, 0x4C, 0x5D, 0x7E, 0x6F, 0x6E, 0x7F,
    0x70, 0x61, 0x60, 0x71, 0x52, 0x43, 0x42, 0x53, 0x50, 0x41, 0x40, 0x51, 0x72, 0x63, 0x62, 0x73,
    0x34, 0x25, 0x24, 0x35, 0x16, 0x07, 0x06, 0x17, 0x14, 0x05, 0x04, 0x15, 0x36, 0x27, 0x26, 0x37,
    0x30, 0x21, 0x20, 0x31, 0x12, 0x03, 0x02, 0x13, 0x10, 0x01, 0x00, 0x11, 0x32, 0x23, 0x22, 0x33,
    0x74, 0x65, 0x64, 0x75, 0x56, 0x47, 0x46, 0x57, 0x54, 0x45, 0x44, 0x55, 0x76, 0x67, 0x66, 0x77,
    0xF8, 0xE9, 0xE8, 0xF9, 0xDA, 0xCB, 0xCA, 0xDB, 0xD8, 0xC9, 0xC8, 0xD9, 0xFA, 0xEB, 0xEA, 0xFB,
    0xBC, 0xAD, 0xAC, 0xBD, 0x9E, 0x8F, 0x8E, 0x9F, 0x9C, 0x8D, 0x8C, 0x9D, 0xBE, 0xAF, 0xAE, 0xBF,
    0xB8, 0xA9, 0xA8, 0xB9, 0x9A, 0x8B, 0x8A, 0x9B, 0x98, 0x89, 0x88, 0x99, 0xBA, 0xAB, 0xAA, 0xBB,
    0xFC, 0xED, 0xEC, 0xFD, 0xDE, 0xCF, 0xCE, 0xDF, 0xDC, 0xCD, 0xCC, 0xDD, 0xFE, 0xEF, 0xEE, 0xFF
} ;

constexpr uint8_t manchesterEncodeLookupTable[] =
{
    0xAA, 0xA9, 0xA6, 0xA5, 0x9A, 0x99, 0x96, 0x95, 0x6A, 0x69, 0x66, 0x65, 0x5A, 0x59, 0x56, 0x55
};

/**
 * Find a free pio and state machine and load the program into it.
 * Returns false if this fails
*/
bool add_pio_program(const pio_program_t *program, PIO *pio_hw, uint *sm, uint *offset)
{
#if defined(PICO_RP2040)
    *pio_hw = pio0;
    if (!pio_can_add_program(*pio_hw, program))
    {
        *pio_hw = pio1;
        if (!pio_can_add_program(*pio_hw, program))
        {
            *offset = -1;
            return false;
        }
    }
    *offset = pio_add_program(*pio_hw, program);
    *sm = (int8_t)pio_claim_unused_sm(*pio_hw, false);
    if (*sm < 0)
    {
        return false;
    }
#endif
    return true;
}


/**
 * Show a spinner on the terminal
 */
void showSpinner()
{
    static uint8_t spinner = 0;
    printf("\b%c", spinChars[spinner]);
    spinner = (spinner +1 ) % sizeof(spinChars);
}

/**
 * Remove the spinner be printing a back character
 */
void clearSpinner()
{
    printf("\b");
}

void manchechesterEncode(uint8_t *destination, const uint8_t* source, uint8_t sourceLength)
{
    for (uint8_t i = 0; i < sourceLength; i++)
    {
        uint8_t val = source[i];
        uint8_t ii = i << 1;
        destination[ii] = manchesterEncodeLookupTable[(val >> 4) & 0x0F];
        destination[ii+1] = manchesterEncodeLookupTable[val & 0x0F];
    }
}


/**
 * @brief Decode a Manchester encoded buffer in place
*/
void manchesterDecode(uint8_t *buffer, uint8_t bufferLength)
{
    uint8_t idx = 0;
    for (uint8_t i = 0; i < bufferLength; i++)
    {
        uint8_t valh = manchesterDecodeLookupTable[buffer[i]];
        uint8_t vall = manchesterDecodeLookupTable[buffer[i+1]];
        buffer[idx] = (valh << 4) | (vall & 0x0F);
        idx++;
        i++;
    }
}

/**
 * @brief Decode a Manchester encoded buffer directy into a destination
*/
void manchesterDecode(uint8_t *destination, const uint8_t *source, uint8_t sourceLength)
{
    uint8_t idx = 0;
    for (uint8_t i = 0; i < sourceLength; i++)
    {
        uint8_t valh = manchesterDecodeLookupTable[source[i]];
        uint8_t vall = manchesterDecodeLookupTable[source[i+1]];
        destination[idx] = (valh << 4) | (vall & 0x0F);
        idx++;
        i++;
    }
}

/**
 * @brief Decode a Manchester encoded buffer directy into a destination including the err array
*/
void manchesterDecode(uint8_t *destination, uint8_t *err, const uint8_t *source, uint8_t sourceLength)
{
    uint8_t idx = 0;
    for (uint8_t i = 0; i < sourceLength; i++)                               // loop over packet bytes
    {
        uint8_t valh = manchesterDecodeLookupTable[source[i]];
        uint8_t vall = manchesterDecodeLookupTable[source[i+1]];
        destination[idx] = (valh << 4) | (vall & 0x0F);
        err[idx] = (valh & 0xF0) | (vall >> 4);
        idx++;
        i++;
    }
}


/**
 * Dump a buffer as a hexidecimal string for terminal output
*/
void print_buffer(uint8_t *buffer, uint8_t length)
{
    printf("Length(%d) ", length);
    for (uint8_t i = 0; i < length; i++)
    {
        printf("0x%02X", buffer[i]);
        if (i < length-1)
        {
            printf(", ");
        }
    }
}



inline bool getParity8Bit(uint8_t x)
{
    uint32_t y = x ^ (x >> 1);
    y = y ^ (y >> 2);
    y = y ^ (y >> 4);
    y = y ^ (y >> 8);
    y = y ^ (y >> 16);
    return y & 1;
}

uint8_t buffersParity8(const uint8_t *buffer, uint16_t bytes)
{
    uint16_t pkt_parity=0;
    for (uint16_t ndx = 0; ndx < bytes; ndx++)
    {
        pkt_parity += getParity8Bit(*(buffer+ndx));
    }
    return pkt_parity & 1; // Note & not a mistake, we want the lowest bit
}
